#VS

#version 400 core

#include shaders/common/common.vert

void main(void)
{
	vec4 pos = CommonVertexProcessing();
	gl_Position = pos;
}

#FS

#version 410 core

#material samplerCube envmap

#include shaders/common/phong_light.frag

void main() {
    vec2 uv = fs_in.vTexCoord0;
    
    // grab diffuse and alpha
    vec4 base = texture(diffuse, uv).rgba;
    vec3 diff = base.rgb;
    float alpha = base.a;

    // don't bother with invisible fragments
    if(alpha <= 0.0)
        discard;

    // tint diffuse
    vec3 tint = diff * renderColor.rgb;
    diff = mix(diff, tint, tintAmount);
    
    // grab specular
    vec3 spec = texture(specular, uv).rgb;

    // get ws normals from normal map
    vec3 normal = texture(normal, uv).rgb;
    normal = normal * 2.0 - 1.0;
    normal = normalize(fs_in.mTBN * normal);

    // view dir to fragment
    vec3 viewDir = normalize(g_vCameraPositionWs - fs_in.vPositionWs);

    // get lighting results
    vec3 col = CommonPhongLighting(diff, spec, gloss, normal, fs_in.vPositionWs, viewDir);

    // env map sampling
    vec3 reflect = reflect(-viewDir, normal);
    vec3 env = texture(envmap, reflect).rgb;

    // tint envmap by diffuse of the material
    env *= diff;

    // apply cubemap according to specular of the material before lighting
    col = mix(col, env, spec);

    vColor = vec4(col, alpha);
}

